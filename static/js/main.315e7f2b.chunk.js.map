{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","App","state","accounts","value","componentDidMount","eth","getAccounts","setState","runCode","alert","error","arbGetReferenceData","token1","token2","token3","client","getReferenceData","rate","arbVal","parseFloat","toFixed","require","Client","etharbvalue","swparbvalue","swpetharbvalue","bnbetharbvalue","busdetharbvalue","this","className","onClick","event","target","id","role","aria-label","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.315e7f2b.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { web3: null, accounts: null, value: [0, 0, 0, 0, 0] };\n\n  componentDidMount = async () => {\n\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      const value = 0;\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = 97;\n      this.setState({ web3, accounts, value }, this.runCode);\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runCode = async () => {\n    const { web3, accounts } = this.state;\n    const { Client } = require('@bandprotocol/bandchain.js');\n    const endpoint = 'https://api-gm-lb.bandchain.org';\n    const client = new Client(endpoint);\n\n    async function arbGetReferenceData(token1, token2, token3) {\n      const rate = await client.getReferenceData([token1, token2, token3]);\n      const arbVal = parseFloat((rate[0].rate).toFixed(8)) * parseFloat((rate[1].rate).toFixed(8)) * parseFloat((rate[2].rate).toFixed(8));\n      return arbVal;\n    }\n    const etharbvalue = await arbGetReferenceData(\"BTC/ETH\", \"ETH/DAI\", \"DAI/BTC\");\n    console.log(etharbvalue);\n    const swparbvalue = await arbGetReferenceData(\"BTC/SXP\", \"SXP/DAI\", \"DAI/BTC\");\n    console.log(swparbvalue);\n    const swpetharbvalue = await arbGetReferenceData(\"BTC/SXP\", \"SXP/ETH\", \"ETH/BTC\");\n    console.log(swpetharbvalue);\n    const bnbetharbvalue = await arbGetReferenceData(\"BTC/BNB\", \"BNB/BUSD\", \"BUSD/BTC\");\n    console.log(bnbetharbvalue);\n    const busdetharbvalue = await arbGetReferenceData(\"BTC/BNB\", \"BNB/ETH\", \"ETH/BTC\");\n    console.log(busdetharbvalue);\n    const value = [etharbvalue, swparbvalue, swpetharbvalue, bnbetharbvalue, busdetharbvalue];\n    this.setState({ web3, accounts, value });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App-header\">\n        <div> Hit refresh to see the current value before performing flash loan</div>\n        <div> Press the button when profit is greater than 0</div>\n        <br></br>\n        <br></br>\n        <button onClick={event => alert(event.target.id)}>\n          <span role=\"img\" aria-label=\"Flash loan\" id=\"Flash loan in progress\">⚡️</span>\n        </button>\n        <br></br>\n        <div>The BTC/ETH/DAI arbitrage Value  is: {this.state.value[0]}</div>\n        <br></br>\n        <div> Indicative profit for 1000x leverage in BTC-B: {(this.state.value[0] - 1.0001) * 300000} USD </div>\n        <br></br>\n        <br></br>\n        <div>The BTC/SWP/DAI arbitrage Value  is: {this.state.value[1]}</div>\n        <br></br>\n        <div> Indicative profit for 1000x leverage in BTC-B: {(this.state.value[1] - 1.0001) * 300000} USD </div>\n        <br></br>\n        <br></br>\n        <div>The BTC/SWP/ETH arbitrage Value  is: {this.state.value[2]}</div>\n        <br></br>\n        <div> Indicative profit for 1000x leverage in BTC-B : {(this.state.value[2] - 1.0001) * 300000} USD </div>\n        <br></br>\n        <br></br>\n        <div>The BTC/BNB/BUSD arbitrage Value  is: {this.state.value[2]}</div>\n        <br></br>\n        <div> Indicative profit for 1000x leverage in BTC-B : {(this.state.value[3] - 1.0001) * 300000} USD </div>\n        <br></br>\n        <br></br>\n        <div>The BTC/BNB/ETH arbitrage Value  is: {this.state.value[2]}</div>\n        <br></br>\n        <div> Indicative profit for 1000x leverage in BTC-B : {(this.state.value[4] - 1.0001) * 300000} USD </div>\n        <br></br>\n        <br></br>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}